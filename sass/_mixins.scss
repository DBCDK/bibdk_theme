//
// Import: Mixins 
//


// Baseline, measured in pixels
// The value should be the same as the font-size value for the html element
// If the html element's font-size is set to 62.5% (of the browser's default font-size of 16px),
// then the variable below would be 10px.
$baseline-px: 10px;

@mixin rem($property, $px-values) {
  // Convert the baseline into rems
  $baseline-rem: $baseline-px / 1rem;
  // Print the first line in pixel values
  #{$property}: $px-values;
  // If there is only one (numeric) value, return the property/value line for it.
  @if type-of($px-values) == "number" {
    #{$property}: $px-values / $baseline-rem; }
  @else {
    // Create an empty list that we can dump values into
    $rem-values: unquote("");
    @each $value in $px-values {
      // If the value is zero, return 0
      @if $value == 0 {
        $rem-values: append($rem-values, $value); }
      @else {
        $rem-values: append($rem-values, $value / $baseline-rem); } }
    // Return the property and its list of converted values
    #{$property}: $rem-values; } 
}


@mixin gradient($color1, $color2) {
	background: $color1;
	background: -moz-linear-gradient(top, $color1 0%, $color2 100%);
	background: -webkit-gradient(linear, left top, left bottom, color-stop(0%,$color1), color-stop(100%,$color2));
	background: -webkit-linear-gradient(top, $color1 0%,$color2 100%);
	background: -o-linear-gradient(top, $color1 0%,$color2 100%);
	background: -ms-linear-gradient(top, $color1 0%,$color2 100%);
	background: linear-gradient(to bottom, $color1 0%,$color2 100%);
	filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='$color1', endColorstr='$color2',GradientType=0 );
}












@mixin box {
  @include box-sizing(border-box);
}
@mixin normal-appearance {
  @include appearance(normal);
}





@mixin reset-input {
  @include box-sizing(border-box);
  @include appearance(normal);
  border:none;
  margin:0;
  padding:0;  
}








